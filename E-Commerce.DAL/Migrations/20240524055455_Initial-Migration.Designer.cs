// <auto-generated />
using System;
using E_Commerce.DAL.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Commerce.DAL.Migrations
{
    [DbContext(typeof(E_CommerceContext))]
    [Migration("20240524055455_Initial-Migration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_Commerce.DAL.Data.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4276),
                            ImageUrl = "",
                            Name = "Apple",
                            Slug = "apple"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4278),
                            ImageUrl = "",
                            Name = "Samsung",
                            Slug = "samsung"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4279),
                            ImageUrl = "",
                            Name = "Sony",
                            Slug = "sony"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4281),
                            ImageUrl = "",
                            Name = "Dell",
                            Slug = "dell"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4282),
                            ImageUrl = "",
                            Name = "HP",
                            Slug = "hp"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4284),
                            ImageUrl = "",
                            Name = "Canon",
                            Slug = "canon"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4285),
                            ImageUrl = "",
                            Name = "Nike",
                            Slug = "nike"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4286),
                            ImageUrl = "",
                            Name = "Adidas",
                            Slug = "adidas"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4287),
                            ImageUrl = "",
                            Name = "Microsoft",
                            Slug = "microsoft"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4289),
                            ImageUrl = "",
                            Name = "LG",
                            Slug = "lg"
                        });
                });

            modelBuilder.Entity("E_Commerce.DAL.Data.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("E_Commerce.DAL.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4253),
                            ImageUrl = "",
                            Name = "Mobiles",
                            Slug = "mobiles"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4258),
                            ImageUrl = "",
                            Name = "Laptops",
                            Slug = "laptops"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4260),
                            ImageUrl = "",
                            Name = "Cameras",
                            Slug = "cameras"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4261),
                            ImageUrl = "",
                            Name = "Televisions",
                            Slug = "televisions"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4262),
                            ImageUrl = "",
                            Name = "Headphones",
                            Slug = "headphones"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4266),
                            ImageUrl = "",
                            Name = "Tablets",
                            Slug = "tablets"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4267),
                            ImageUrl = "",
                            Name = "Smart Watches",
                            Slug = "smart-watches"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4268),
                            ImageUrl = "",
                            Name = "Printers",
                            Slug = "printers"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4269),
                            ImageUrl = "",
                            Name = "Gaming Consoles",
                            Slug = "gaming-consoles"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4271),
                            ImageUrl = "",
                            Name = "Smart Home Devices",
                            Slug = "smart-home-devices"
                        });
                });

            modelBuilder.Entity("E_Commerce.DAL.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("E_Commerce.DAL.Data.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("E_Commerce.DAL.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Colors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal?>("PriceAfterDiscount")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double?>("RatingsAverage")
                        .HasColumnType("float");

                    b.Property<int?>("RatingsQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sold")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            Colors = "[\"Black\",\"Silver\",\"Gold\"]",
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4296),
                            Description = "Latest iPhone model with advanced camera features",
                            ImageUrl = "",
                            Price = 1099.99m,
                            PriceAfterDiscount = 999.99m,
                            Quantity = 100,
                            RatingsAverage = 4.5,
                            RatingsQuantity = 500,
                            Slug = "iphone-13-pro",
                            Sold = 22,
                            Title = "iPhone 13 Pro"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            CategoryId = 1,
                            Colors = "[\"Phantom Black\",\"Phantom Silver\",\"Phantom Titanium\"]",
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4308),
                            Description = "Flagship Android smartphone with a powerful camera system",
                            ImageUrl = "",
                            Price = 1199.99m,
                            PriceAfterDiscount = 1099.99m,
                            Quantity = 150,
                            RatingsAverage = 4.7999999999999998,
                            RatingsQuantity = 400,
                            Slug = "samsung-galaxy-s21-ultra",
                            Sold = 28,
                            Title = "Samsung Galaxy S21 Ultra"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 2,
                            CategoryId = 2,
                            Colors = "[\"Platinum Silver\",\"Frost White\",\"Rose Gold\"]",
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4314),
                            Description = "Thin and powerful laptop with a stunning InfinityEdge display",
                            ImageUrl = "",
                            Price = 1299.99m,
                            PriceAfterDiscount = 1199.99m,
                            Quantity = 50,
                            RatingsAverage = 4.5999999999999996,
                            RatingsQuantity = 300,
                            Slug = "dell-xps-13",
                            Sold = 5,
                            Title = "Dell XPS 13"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            CategoryId = 2,
                            Colors = "[\"Space Gray\",\"Silver\"]",
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4318),
                            Description = "Professional-grade laptop with powerful performance and Retina display",
                            ImageUrl = "",
                            Price = 1999.99m,
                            PriceAfterDiscount = 1899.99m,
                            Quantity = 30,
                            RatingsAverage = 4.9000000000000004,
                            RatingsQuantity = 350,
                            Slug = "macbook-pro",
                            Sold = 7,
                            Title = "MacBook Pro"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 3,
                            CategoryId = 3,
                            Colors = "[\"Space Gray\",\"Silver\"]",
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4323),
                            Description = "Full-frame mirrorless camera with excellent low-light performance",
                            ImageUrl = "",
                            Price = 8999.99m,
                            PriceAfterDiscount = 1899.99m,
                            Quantity = 300,
                            RatingsAverage = 2.8999999999999999,
                            RatingsQuantity = 350,
                            Slug = "sony-alpha-a7-iii",
                            Sold = 70,
                            Title = "Sony Alpha A7 III"
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 3,
                            CategoryId = 3,
                            Colors = "[\"Black\",\"Silver\"]",
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4328),
                            Description = "High-resolution mirrorless camera with advanced autofocus capabilities",
                            ImageUrl = "",
                            Price = 3499.99m,
                            PriceAfterDiscount = 3299.99m,
                            Quantity = 80,
                            RatingsAverage = 4.7000000000000002,
                            RatingsQuantity = 100,
                            Slug = "canon-eos-r5",
                            Sold = 50,
                            Title = "Canon EOS R5"
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 4,
                            CategoryId = 4,
                            Colors = "[\"Stormy Black\",\"Cloudy White\",\"Sunrise Gold\"]",
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4334),
                            Description = "Google's flagship smartphone with an exceptional camera and 5G capability",
                            ImageUrl = "",
                            Price = 999.99m,
                            Quantity = 150,
                            RatingsAverage = 4.9000000000000004,
                            RatingsQuantity = 200,
                            Slug = "google-pixel-6-pro",
                            Sold = 100,
                            Title = "Google Pixel 6 Pro"
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 4,
                            CategoryId = 4,
                            Colors = "[\"Morning Mist\",\"Pine Green\",\"Stellar Black\"]",
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4338),
                            Description = "Premium Android smartphone with Hasselblad camera technology",
                            ImageUrl = "",
                            Price = 1099.99m,
                            PriceAfterDiscount = 999.99m,
                            Quantity = 120,
                            RatingsAverage = 1.7,
                            RatingsQuantity = 180,
                            Slug = "oneplus-9-pro",
                            Sold = 80,
                            Title = "OnePlus 9 Pro"
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 5,
                            CategoryId = 5,
                            Colors = "[\"Graphite Black\",\"Pine Green\"]",
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4343),
                            Description = "Ultra-portable business laptop with a durable design and impressive battery life",
                            ImageUrl = "",
                            Price = 3499.99m,
                            PriceAfterDiscount = 2499.99m,
                            Quantity = 500,
                            RatingsAverage = 2.6000000000000001,
                            RatingsQuantity = 220,
                            Slug = "lenovo-thinkpad-x1-carbon",
                            Sold = 400,
                            Title = "Lenovo ThinkPad X1 Carbon"
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 5,
                            CategoryId = 5,
                            Colors = "[\"Graphite Black\",\"Rose Gold\"]",
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4348),
                            Description = "Convertible laptop with sleek design and powerful performance",
                            ImageUrl = "",
                            Price = 1499.99m,
                            PriceAfterDiscount = 1399.99m,
                            Quantity = 200,
                            RatingsAverage = 2.6000000000000001,
                            RatingsQuantity = 220,
                            Slug = "hp-spectre-x360",
                            Sold = 150,
                            Title = "HP Spectre x360"
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 6,
                            CategoryId = 6,
                            Colors = "[\"Midnight Blue\"]",
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4352),
                            Description = "Mirrorless camera with outstanding image quality and in-body stabilization",
                            ImageUrl = "",
                            Price = 1299.99m,
                            Quantity = 180,
                            RatingsAverage = 3.2000000000000002,
                            RatingsQuantity = 180,
                            Slug = "fujifilm-x-t4",
                            Sold = 120,
                            Title = "Fujifilm X-T4"
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 6,
                            CategoryId = 6,
                            Colors = "[\"Rose Gold\"]",
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4356),
                            Description = "Full-frame mirrorless camera with 24.5 megapixels and 4K video capability",
                            ImageUrl = "",
                            Price = 1799.99m,
                            PriceAfterDiscount = 1599.99m,
                            Quantity = 250,
                            RatingsAverage = 4.5,
                            RatingsQuantity = 300,
                            Slug = "nikon-z6-ii",
                            Sold = 200,
                            Title = "Nikon Z6 II"
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 7,
                            CategoryId = 7,
                            Colors = "[\"Space Gray\"]",
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4360),
                            Description = "Slim and stylish laptop with touchscreen display and excellent keyboard",
                            ImageUrl = "",
                            Price = 1899.99m,
                            PriceAfterDiscount = 1799.99m,
                            Quantity = 300,
                            RatingsAverage = 3.8999999999999999,
                            RatingsQuantity = 250,
                            Slug = "microsoft-surface-laptop-4",
                            Sold = 280,
                            Title = "Microsoft Surface Laptop 4"
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 7,
                            CategoryId = 7,
                            Colors = "[\"Silver\",\"Space Gray\"]",
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4364),
                            Description = "Gaming smartphone with high-refresh-rate display and advanced cooling system",
                            ImageUrl = "",
                            Price = 999.99m,
                            PriceAfterDiscount = 899.99m,
                            Quantity = 150,
                            RatingsAverage = 4.0999999999999996,
                            RatingsQuantity = 180,
                            Slug = "asus-rog-phone-5",
                            Sold = 100,
                            Title = "ASUS ROG Phone 5"
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 8,
                            CategoryId = 8,
                            Colors = "[\"Sapphire Blue\",\"Silver\"]",
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4368),
                            Description = "Next-gen gaming console with fast load times and immersive 4K gaming",
                            ImageUrl = "",
                            Price = 2099.99m,
                            PriceAfterDiscount = 1899.99m,
                            Quantity = 320,
                            RatingsAverage = 4.7000000000000002,
                            RatingsQuantity = 280,
                            Slug = "sony-playstation-5",
                            Sold = 300,
                            Title = "Sony PlayStation 5"
                        },
                        new
                        {
                            Id = 16,
                            BrandId = 8,
                            CategoryId = 8,
                            Colors = "[\"Gold\",\"Silver\"]",
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4375),
                            Description = "Powerful gaming console with 4K resolution and backward compatibility",
                            ImageUrl = "",
                            Price = 1399.99m,
                            Quantity = 220,
                            RatingsAverage = 3.7999999999999998,
                            RatingsQuantity = 200,
                            Slug = "xbox-series-x",
                            Sold = 200,
                            Title = "Xbox Series X"
                        },
                        new
                        {
                            Id = 17,
                            BrandId = 9,
                            CategoryId = 9,
                            Colors = "[\"Coral Red\",\"Gold\"]",
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4379),
                            Description = "Smart speaker with improved sound quality and built-in Alexa voice assistant",
                            ImageUrl = "",
                            Price = 1599.99m,
                            Quantity = 270,
                            RatingsAverage = 4.2999999999999998,
                            RatingsQuantity = 220,
                            Slug = "amazon-echo-(4th-gen)",
                            Sold = 240,
                            Title = "Amazon Echo (4th Gen)"
                        },
                        new
                        {
                            Id = 18,
                            BrandId = 9,
                            CategoryId = 9,
                            Colors = "[\"Emerald Green\",\"Coral Red\"]",
                            CreatedAt = new DateTime(2024, 5, 24, 5, 54, 51, 263, DateTimeKind.Utc).AddTicks(4394),
                            Description = "Smart display with a large screen, perfect for controlling your smart home devices",
                            ImageUrl = "",
                            Price = 1199.99m,
                            PriceAfterDiscount = 1099.99m,
                            Quantity = 190,
                            RatingsAverage = 3.6000000000000001,
                            RatingsQuantity = 210,
                            Slug = "google-nest-hub-max",
                            Sold = 150,
                            Title = "Google Nest Hub Max"
                        });
                });

            modelBuilder.Entity("E_Commerce.DAL.Data.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("E_Commerce.DAL.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E_Commerce.DAL.Data.Models.CartItem", b =>
                {
                    b.HasOne("E_Commerce.DAL.Data.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.DAL.Data.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("CartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("E_Commerce.DAL.Data.Models.Order", b =>
                {
                    b.HasOne("E_Commerce.DAL.Data.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Commerce.DAL.Data.Models.OrderItem", b =>
                {
                    b.HasOne("E_Commerce.DAL.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.DAL.Data.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.DAL.Data.Models.Product", b =>
                {
                    b.HasOne("E_Commerce.DAL.Data.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.DAL.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("E_Commerce.DAL.Data.Models.ShoppingCart", b =>
                {
                    b.HasOne("E_Commerce.DAL.Data.Models.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("E_Commerce.DAL.Data.Models.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("E_Commerce.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("E_Commerce.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("E_Commerce.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce.DAL.Data.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_Commerce.DAL.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_Commerce.DAL.Data.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("E_Commerce.DAL.Data.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("E_Commerce.DAL.Data.Models.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("E_Commerce.DAL.Data.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShoppingCart");
                });
#pragma warning restore 612, 618
        }
    }
}
